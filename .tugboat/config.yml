services:
  # What to call the service hosting the site.
  php: 
    # Use PHP 7.x with Apache; this syntax pulls in the latest version of PHP 7
    image: tugboatqa/php:7-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache
        - docker-php-ext-install opcache
        
        # Install the BCMath PHP extension.
        - docker-php-ext-install bcmath
        
        # Build and install the GEOS PHP extension.
        # See https://git.osgeo.org/gitea/geos/php-geos
        - apt-get update && apt-get install -y libgeos-dev && curl -fsSL 'https://git.osgeo.org/gitea/geos/php-geos/archive/1.0.0.tar.gz' -o php-geos.tar.gz && tar -xzf php-geos.tar.gz && rm php-geos.tar.gz && ( cd php-geos && ./autogen.sh && ./configure && make && make install ) && rm -r php-geos && docker-php-ext-enable geos

        # Install git and unzip (needed by Composer).
        - apt-get update && apt-get install -y git unzip
        
        # Install composer 1.10.
        - composer self-update --1
        
        - a2enmod headers rewrite
        
        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # Create the Drupal private and public files directories if they aren't
        # already present.
        #- mkdir -p "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/sites/default/files"

        # A common practice in many Drupal projects is to store the config and
        # private files outside of the Drupal root. If that's the case for your
        # project, you can either specify the absolute paths to those
        # directories in your settings.local.php, or you can symlink them in
        # here. Here is an example of the latter option:
        #- ln -snf "${TUGBOAT_ROOT}/config" "/opt/drupal/../config"
        #- ln -snf "${TUGBOAT_ROOT}/files-private" "/opt/drupal/../files-private"

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Use the tugboat-specific Drupal settings.
        #- cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"

        # Install/update packages managed by composer, including drush.
        - COMPOSER_MEMORY_LIMIT=-1 composer install --optimize-autoloader

        # Copy Drupal's public files directory from an external server. The
        # public SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
        #- rsync -av --delete user@example.com:/path/to/files/ "${DOCROOT}/sites/default/files/"

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
#        - composer require --dev drupal/stage_file_proxy
#        - vendor/bin/drush pm:enable --yes stage_file_proxy
#        - vendor/bin/drush config:set --yes stage_file_proxy.settings origin "http://www.example.com"

        # Set file permissions such that Drupal will not complain.
        #- chgrp -R www-data "${DOCROOT}/sites/default/files"
        #- find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        #- find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;
        
        - mkdir -p "${DOCROOT}/sites/default/files"
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;
        - vendor/bin/drush --yes --db-url=mysql://tugboat:tugboat@mysql:3306/tugboat --account-name=admin --account-pass=admin site:install

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - COMPOSER_MEMORY_LIMIT=-1 composer install --optimize-autoloader
        # Is this needed??
        #- COMPOSER_MEMORY_LIMIT=-1 composer require drush/drush
        - vendor/bin/drush updatedb -y
        - vendor/bin/drush cache:rebuild

  # This 'mysql' key acts as the hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mariadb:10.5

